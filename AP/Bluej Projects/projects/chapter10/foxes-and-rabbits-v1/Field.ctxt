#BlueJ class context
comment0.params=depth\ width
comment0.target=Field(int,\ int)
comment0.text=\nRepresent\ a\ field\ of\ the\ given\ dimensions.\n@param\ depth\ The\ depth\ of\ the\ field.\n@param\ width\ The\ width\ of\ the\ field.\n\n
comment1.target=void\ clear()
comment1.text=\nEmpty\ the\ field.\n\n
comment10.params=location
comment10.target=List<Location>\ adjacentLocations(Location)
comment10.text=\nReturn\ a\ shuffled\ list\ of\ locations\ adjacent\ to\ the\ given\ one.\nThe\ list\ will\ not\ include\ the\ location\ itself.\nAll\ locations\ will\ lie\ within\ the\ grid.\n@param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\n@return\ A\ list\ of\ locations\ adjacent\ to\ that\ given.\n\n
comment11.target=int\ getDepth()
comment11.text=\nReturn\ the\ depth\ of\ the\ field.\n@return\ The\ depth\ of\ the\ field.\n\n
comment12.target=int\ getWidth()
comment12.text=\nReturn\ the\ width\ of\ the\ field.\n@return\ The\ width\ of\ the\ field.\n\n
comment2.params=location
comment2.target=void\ clear(Location)
comment2.text=\nClear\ the\ given\ location.\n@param\ location\ The\ location\ to\ clear.\n\n
comment3.params=animal\ row\ col
comment3.target=void\ place(Object,\ int,\ int)
comment3.text=\nPlace\ an\ animal\ at\ the\ given\ location.\nIf\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\nbe\ lost.\n@param\ animal\ The\ animal\ to\ be\ placed.\n@param\ row\ Row\ coordinate\ of\ the\ location.\n@param\ col\ Column\ coordinate\ of\ the\ location.\n\n
comment4.params=animal\ location
comment4.target=void\ place(Object,\ Location)
comment4.text=\nPlace\ an\ animal\ at\ the\ given\ location.\nIf\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\nbe\ lost.\n@param\ animal\ The\ animal\ to\ be\ placed.\n@param\ location\ Where\ to\ place\ the\ animal.\n\n
comment5.params=location
comment5.target=Object\ getObjectAt(Location)
comment5.text=\nReturn\ the\ animal\ at\ the\ given\ location,\ if\ any.\n@param\ location\ Where\ in\ the\ field.\n@return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n\n
comment6.params=row\ col
comment6.target=Object\ getObjectAt(int,\ int)
comment6.text=\nReturn\ the\ animal\ at\ the\ given\ location,\ if\ any.\n@param\ row\ The\ desired\ row.\n@param\ col\ The\ desired\ column.\n@return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\n\n
comment7.params=location
comment7.target=Location\ randomAdjacentLocation(Location)
comment7.text=\nGenerate\ a\ random\ location\ that\ is\ adjacent\ to\ the\ngiven\ location,\ or\ is\ the\ same\ location.\nThe\ returned\ location\ will\ be\ within\ the\ valid\ bounds\nof\ the\ field.\n@param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n@return\ A\ valid\ location\ within\ the\ grid\ area.\n\n
comment8.params=location
comment8.target=List<Location>\ getFreeAdjacentLocations(Location)
comment8.text=\nGet\ a\ shuffled\ list\ of\ the\ free\ adjacent\ locations.\n@param\ location\ Get\ locations\ adjacent\ to\ this.\n@return\ A\ list\ of\ free\ adjacent\ locations.\n\n
comment9.params=location
comment9.target=Location\ freeAdjacentLocation(Location)
comment9.text=\nTry\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\ngiven\ location.\ If\ there\ is\ none,\ return\ null.\nThe\ returned\ location\ will\ be\ within\ the\ valid\ bounds\nof\ the\ field.\n@param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n@return\ A\ valid\ location\ within\ the\ grid\ area.\n\n
numComments=13
