#BlueJ class context
comment0.params=depth\ width
comment0.target=Field(int,\ int)
comment0.text=\r\n\ Represent\ a\ field\ of\ the\ given\ dimensions.\r\n\ @param\ depth\ The\ depth\ of\ the\ field.\r\n\ @param\ width\ The\ width\ of\ the\ field.\r\n
comment1.params=
comment1.target=void\ clear()
comment1.text=\r\n\ Empty\ the\ field.\r\n
comment10.params=location
comment10.target=java.util.List\ adjacentLocations(Location)
comment10.text=\r\n\ Return\ a\ shuffled\ list\ of\ locations\ adjacent\ to\ the\ given\ one.\r\n\ The\ list\ will\ not\ include\ the\ location\ itself.\r\n\ All\ locations\ will\ lie\ within\ the\ grid.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\r\n\ @return\ A\ list\ of\ locations\ adjacent\ to\ that\ given.\r\n
comment11.params=
comment11.target=int\ getDepth()
comment11.text=\r\n\ Return\ the\ depth\ of\ the\ field.\r\n\ @return\ The\ depth\ of\ the\ field.\r\n
comment12.params=
comment12.target=int\ getWidth()
comment12.text=\r\n\ Return\ the\ width\ of\ the\ field.\r\n\ @return\ The\ width\ of\ the\ field.\r\n
comment2.params=location
comment2.target=void\ clear(Location)
comment2.text=\r\n\ Clear\ the\ given\ location.\r\n\ @param\ location\ The\ location\ to\ clear.\r\n
comment3.params=animal\ row\ col
comment3.target=void\ place(java.lang.Object,\ int,\ int)
comment3.text=\r\n\ Place\ an\ animal\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\r\n\ be\ lost.\r\n\ @param\ animal\ The\ animal\ to\ be\ placed.\r\n\ @param\ row\ Row\ coordinate\ of\ the\ location.\r\n\ @param\ col\ Column\ coordinate\ of\ the\ location.\r\n
comment4.params=animal\ location
comment4.target=void\ place(java.lang.Object,\ Location)
comment4.text=\r\n\ Place\ an\ animal\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\r\n\ be\ lost.\r\n\ @param\ animal\ The\ animal\ to\ be\ placed.\r\n\ @param\ location\ Where\ to\ place\ the\ animal.\r\n
comment5.params=location
comment5.target=java.lang.Object\ getObjectAt(Location)
comment5.text=\r\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ location\ Where\ in\ the\ field.\r\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment6.params=row\ col
comment6.target=java.lang.Object\ getObjectAt(int,\ int)
comment6.text=\r\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ row\ The\ desired\ row.\r\n\ @param\ col\ The\ desired\ column.\r\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment7.params=location
comment7.target=Location\ randomAdjacentLocation(Location)
comment7.text=\r\n\ Generate\ a\ random\ location\ that\ is\ adjacent\ to\ the\r\n\ given\ location,\ or\ is\ the\ same\ location.\r\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\r\n\ of\ the\ field.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\r\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\r\n
comment8.params=location
comment8.target=java.util.List\ getFreeAdjacentLocations(Location)
comment8.text=\r\n\ Get\ a\ shuffled\ list\ of\ the\ free\ adjacent\ locations.\r\n\ @param\ location\ Get\ locations\ adjacent\ to\ this.\r\n\ @return\ A\ list\ of\ free\ adjacent\ locations.\r\n
comment9.params=location
comment9.target=Location\ freeAdjacentLocation(Location)
comment9.text=\r\n\ Try\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\r\n\ given\ location.\ If\ there\ is\ none,\ return\ null.\r\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\r\n\ of\ the\ field.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\r\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\r\n
numComments=13
